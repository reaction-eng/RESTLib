// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/roles (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	roles "github.com/reaction-eng/restlib/roles"
	users "github.com/reaction-eng/restlib/users"
	reflect "reflect"
)

// MockRolesRepo is a mock of Repo interface
type MockRolesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRolesRepoMockRecorder
}

// MockRolesRepoMockRecorder is the mock recorder for MockRolesRepo
type MockRolesRepoMockRecorder struct {
	mock *MockRolesRepo
}

// NewMockRolesRepo creates a new mock instance
func NewMockRolesRepo(ctrl *gomock.Controller) *MockRolesRepo {
	mock := &MockRolesRepo{ctrl: ctrl}
	mock.recorder = &MockRolesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRolesRepo) EXPECT() *MockRolesRepoMockRecorder {
	return m.recorder
}

// GetPermissions mocks base method
func (m *MockRolesRepo) GetPermissions(arg0 users.User, arg1 int) (*roles.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", arg0, arg1)
	ret0, _ := ret[0].(*roles.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions
func (mr *MockRolesRepoMockRecorder) GetPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockRolesRepo)(nil).GetPermissions), arg0, arg1)
}

// SetRolesByName mocks base method
func (m *MockRolesRepo) SetRolesByName(arg0 users.User, arg1 int, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolesByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRolesByName indicates an expected call of SetRolesByName
func (mr *MockRolesRepoMockRecorder) SetRolesByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolesByName", reflect.TypeOf((*MockRolesRepo)(nil).SetRolesByName), arg0, arg1, arg2)
}

// SetRolesByRoleId mocks base method
func (m *MockRolesRepo) SetRolesByRoleId(arg0 users.User, arg1 int, arg2 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRolesByRoleId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRolesByRoleId indicates an expected call of SetRolesByRoleId
func (mr *MockRolesRepoMockRecorder) SetRolesByRoleId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRolesByRoleId", reflect.TypeOf((*MockRolesRepo)(nil).SetRolesByRoleId), arg0, arg1, arg2)
}
