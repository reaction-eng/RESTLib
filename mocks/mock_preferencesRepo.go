// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/preferences (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	preferences "github.com/reaction-eng/restlib/preferences"
	users "github.com/reaction-eng/restlib/users"
	reflect "reflect"
)

// MockPreferencesRepo is a mock of Repo interface
type MockPreferencesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPreferencesRepoMockRecorder
}

// MockPreferencesRepoMockRecorder is the mock recorder for MockPreferencesRepo
type MockPreferencesRepoMockRecorder struct {
	mock *MockPreferencesRepo
}

// NewMockPreferencesRepo creates a new mock instance
func NewMockPreferencesRepo(ctrl *gomock.Controller) *MockPreferencesRepo {
	mock := &MockPreferencesRepo{ctrl: ctrl}
	mock.recorder = &MockPreferencesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPreferencesRepo) EXPECT() *MockPreferencesRepoMockRecorder {
	return m.recorder
}

// CleanUp mocks base method
func (m *MockPreferencesRepo) CleanUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp")
}

// CleanUp indicates an expected call of CleanUp
func (mr *MockPreferencesRepoMockRecorder) CleanUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockPreferencesRepo)(nil).CleanUp))
}

// GetPreferences mocks base method
func (m *MockPreferencesRepo) GetPreferences(arg0 users.User) (*preferences.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferences", arg0)
	ret0, _ := ret[0].(*preferences.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferences indicates an expected call of GetPreferences
func (mr *MockPreferencesRepoMockRecorder) GetPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferences", reflect.TypeOf((*MockPreferencesRepo)(nil).GetPreferences), arg0)
}

// SetPreferences mocks base method
func (m *MockPreferencesRepo) SetPreferences(arg0 users.User, arg1 *preferences.SettingGroup) (*preferences.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreferences", arg0, arg1)
	ret0, _ := ret[0].(*preferences.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPreferences indicates an expected call of SetPreferences
func (mr *MockPreferencesRepoMockRecorder) SetPreferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreferences", reflect.TypeOf((*MockPreferencesRepo)(nil).SetPreferences), arg0, arg1)
}
