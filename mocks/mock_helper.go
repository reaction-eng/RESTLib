// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/passwords (interfaces: Helper)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHelper is a mock of Helper interface
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method
func (m *MockHelper) ComparePasswords(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords
func (mr *MockHelperMockRecorder) ComparePasswords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockHelper)(nil).ComparePasswords), arg0, arg1)
}

// CreateJWTToken mocks base method
func (m *MockHelper) CreateJWTToken(arg0, arg1 int, arg2 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWTToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateJWTToken indicates an expected call of CreateJWTToken
func (mr *MockHelperMockRecorder) CreateJWTToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTToken", reflect.TypeOf((*MockHelper)(nil).CreateJWTToken), arg0, arg1, arg2)
}

// HashPassword mocks base method
func (m *MockHelper) HashPassword(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword
func (mr *MockHelperMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHelper)(nil).HashPassword), arg0)
}

// TokenGenerator mocks base method
func (m *MockHelper) TokenGenerator() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenGenerator")
	ret0, _ := ret[0].(string)
	return ret0
}

// TokenGenerator indicates an expected call of TokenGenerator
func (mr *MockHelperMockRecorder) TokenGenerator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenGenerator", reflect.TypeOf((*MockHelper)(nil).TokenGenerator))
}

// ValidatePassword mocks base method
func (m *MockHelper) ValidatePassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword
func (mr *MockHelperMockRecorder) ValidatePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockHelper)(nil).ValidatePassword), arg0)
}

// ValidateToken mocks base method
func (m *MockHelper) ValidateToken(arg0 string) (int, int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ValidateToken indicates an expected call of ValidateToken
func (mr *MockHelperMockRecorder) ValidateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockHelper)(nil).ValidateToken), arg0)
}
