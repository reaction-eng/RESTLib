// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/email (interfaces: Emailer,TableInfo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	email "github.com/reaction-eng/restlib/email"
	utils "github.com/reaction-eng/restlib/utils"
	reflect "reflect"
)

// MockEmailer is a mock of Emailer interface
type MockEmailer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailerMockRecorder
}

// MockEmailerMockRecorder is the mock recorder for MockEmailer
type MockEmailerMockRecorder struct {
	mock *MockEmailer
}

// NewMockEmailer creates a new mock instance
func NewMockEmailer(ctrl *gomock.Controller) *MockEmailer {
	mock := &MockEmailer{ctrl: ctrl}
	mock.recorder = &MockEmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailer) EXPECT() *MockEmailerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmailer) Send(arg0 *email.HeaderInfo, arg1 string, arg2 map[string][]*utils.Base64File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEmailerMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailer)(nil).Send), arg0, arg1, arg2)
}

// SendTable mocks base method
func (m *MockEmailer) SendTable(arg0 *email.HeaderInfo, arg1 email.TableInfo, arg2 map[string][]*utils.Base64File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTable indicates an expected call of SendTable
func (mr *MockEmailerMockRecorder) SendTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTable", reflect.TypeOf((*MockEmailer)(nil).SendTable), arg0, arg1, arg2)
}

// SendTemplateFile mocks base method
func (m *MockEmailer) SendTemplateFile(arg0 *email.HeaderInfo, arg1 string, arg2 interface{}, arg3 map[string][]*utils.Base64File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemplateFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemplateFile indicates an expected call of SendTemplateFile
func (mr *MockEmailerMockRecorder) SendTemplateFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemplateFile", reflect.TypeOf((*MockEmailer)(nil).SendTemplateFile), arg0, arg1, arg2, arg3)
}

// SendTemplateString mocks base method
func (m *MockEmailer) SendTemplateString(arg0 *email.HeaderInfo, arg1 string, arg2 interface{}, arg3 map[string][]*utils.Base64File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTemplateString", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTemplateString indicates an expected call of SendTemplateString
func (mr *MockEmailerMockRecorder) SendTemplateString(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTemplateString", reflect.TypeOf((*MockEmailer)(nil).SendTemplateString), arg0, arg1, arg2, arg3)
}

// MockTableInfo is a mock of TableInfo interface
type MockTableInfo struct {
	ctrl     *gomock.Controller
	recorder *MockTableInfoMockRecorder
}

// MockTableInfoMockRecorder is the mock recorder for MockTableInfo
type MockTableInfoMockRecorder struct {
	mock *MockTableInfo
}

// NewMockTableInfo creates a new mock instance
func NewMockTableInfo(ctrl *gomock.Controller) *MockTableInfo {
	mock := &MockTableInfo{ctrl: ctrl}
	mock.recorder = &MockTableInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTableInfo) EXPECT() *MockTableInfoMockRecorder {
	return m.recorder
}

// GetChildren mocks base method
func (m *MockTableInfo) GetChildren() []email.TableInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren")
	ret0, _ := ret[0].([]email.TableInfo)
	return ret0
}

// GetChildren indicates an expected call of GetChildren
func (mr *MockTableInfoMockRecorder) GetChildren() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockTableInfo)(nil).GetChildren))
}

// GetTitle mocks base method
func (m *MockTableInfo) GetTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTitle indicates an expected call of GetTitle
func (mr *MockTableInfoMockRecorder) GetTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockTableInfo)(nil).GetTitle))
}

// GetValue mocks base method
func (m *MockTableInfo) GetValue() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockTableInfoMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockTableInfo)(nil).GetValue))
}

// IsNode mocks base method
func (m *MockTableInfo) IsNode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNode indicates an expected call of IsNode
func (mr *MockTableInfoMockRecorder) IsNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNode", reflect.TypeOf((*MockTableInfo)(nil).IsNode))
}
