// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/passwords (interfaces: ResetRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResetRepo is a mock of ResetRepo interface
type MockResetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockResetRepoMockRecorder
}

// MockResetRepoMockRecorder is the mock recorder for MockResetRepo
type MockResetRepoMockRecorder struct {
	mock *MockResetRepo
}

// NewMockResetRepo creates a new mock instance
func NewMockResetRepo(ctrl *gomock.Controller) *MockResetRepo {
	mock := &MockResetRepo{ctrl: ctrl}
	mock.recorder = &MockResetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResetRepo) EXPECT() *MockResetRepoMockRecorder {
	return m.recorder
}

// CheckForActivationToken mocks base method
func (m *MockResetRepo) CheckForActivationToken(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForActivationToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForActivationToken indicates an expected call of CheckForActivationToken
func (mr *MockResetRepoMockRecorder) CheckForActivationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForActivationToken", reflect.TypeOf((*MockResetRepo)(nil).CheckForActivationToken), arg0, arg1)
}

// CheckForOneTimePasswordToken mocks base method
func (m *MockResetRepo) CheckForOneTimePasswordToken(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForOneTimePasswordToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForOneTimePasswordToken indicates an expected call of CheckForOneTimePasswordToken
func (mr *MockResetRepoMockRecorder) CheckForOneTimePasswordToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForOneTimePasswordToken", reflect.TypeOf((*MockResetRepo)(nil).CheckForOneTimePasswordToken), arg0, arg1)
}

// CheckForResetToken mocks base method
func (m *MockResetRepo) CheckForResetToken(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForResetToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForResetToken indicates an expected call of CheckForResetToken
func (mr *MockResetRepoMockRecorder) CheckForResetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForResetToken", reflect.TypeOf((*MockResetRepo)(nil).CheckForResetToken), arg0, arg1)
}

// CleanUp mocks base method
func (m *MockResetRepo) CleanUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp")
}

// CleanUp indicates an expected call of CleanUp
func (mr *MockResetRepoMockRecorder) CleanUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockResetRepo)(nil).CleanUp))
}

// IssueActivationRequest mocks base method
func (m *MockResetRepo) IssueActivationRequest(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueActivationRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueActivationRequest indicates an expected call of IssueActivationRequest
func (mr *MockResetRepoMockRecorder) IssueActivationRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueActivationRequest", reflect.TypeOf((*MockResetRepo)(nil).IssueActivationRequest), arg0, arg1, arg2)
}

// IssueOneTimePasswordRequest mocks base method
func (m *MockResetRepo) IssueOneTimePasswordRequest(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueOneTimePasswordRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueOneTimePasswordRequest indicates an expected call of IssueOneTimePasswordRequest
func (mr *MockResetRepoMockRecorder) IssueOneTimePasswordRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOneTimePasswordRequest", reflect.TypeOf((*MockResetRepo)(nil).IssueOneTimePasswordRequest), arg0, arg1, arg2)
}

// IssueResetRequest mocks base method
func (m *MockResetRepo) IssueResetRequest(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueResetRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueResetRequest indicates an expected call of IssueResetRequest
func (mr *MockResetRepoMockRecorder) IssueResetRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueResetRequest", reflect.TypeOf((*MockResetRepo)(nil).IssueResetRequest), arg0, arg1, arg2)
}

// UseToken mocks base method
func (m *MockResetRepo) UseToken(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseToken indicates an expected call of UseToken
func (mr *MockResetRepoMockRecorder) UseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseToken", reflect.TypeOf((*MockResetRepo)(nil).UseToken), arg0)
}
