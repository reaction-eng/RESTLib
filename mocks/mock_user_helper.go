// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reaction-eng/restlib/users (interfaces: Helper)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	users "github.com/reaction-eng/restlib/users"
	reflect "reflect"
)

// MockUserHelper is a mock of Helper interface
type MockUserHelper struct {
	ctrl     *gomock.Controller
	recorder *MockUserHelperMockRecorder
}

// MockUserHelperMockRecorder is the mock recorder for MockUserHelper
type MockUserHelperMockRecorder struct {
	mock *MockUserHelper
}

// NewMockUserHelper creates a new mock instance
func NewMockUserHelper(ctrl *gomock.Controller) *MockUserHelper {
	mock := &MockUserHelper{ctrl: ctrl}
	mock.recorder = &MockUserHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserHelper) EXPECT() *MockUserHelperMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method
func (m *MockUserHelper) ActivateUser(arg0 users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser
func (mr *MockUserHelperMockRecorder) ActivateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockUserHelper)(nil).ActivateUser), arg0)
}

// AddUser mocks base method
func (m *MockUserHelper) AddUser(arg0 users.User) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser
func (mr *MockUserHelperMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserHelper)(nil).AddUser), arg0)
}

// AddUserToOrganization mocks base method
func (m *MockUserHelper) AddUserToOrganization(arg0 users.User, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToOrganization indicates an expected call of AddUserToOrganization
func (mr *MockUserHelperMockRecorder) AddUserToOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToOrganization", reflect.TypeOf((*MockUserHelper)(nil).AddUserToOrganization), arg0, arg1)
}

// CheckForActivationToken mocks base method
func (m *MockUserHelper) CheckForActivationToken(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForActivationToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForActivationToken indicates an expected call of CheckForActivationToken
func (mr *MockUserHelperMockRecorder) CheckForActivationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForActivationToken", reflect.TypeOf((*MockUserHelper)(nil).CheckForActivationToken), arg0, arg1)
}

// CheckForOneTimePasswordToken mocks base method
func (m *MockUserHelper) CheckForOneTimePasswordToken(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForOneTimePasswordToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForOneTimePasswordToken indicates an expected call of CheckForOneTimePasswordToken
func (mr *MockUserHelperMockRecorder) CheckForOneTimePasswordToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForOneTimePasswordToken", reflect.TypeOf((*MockUserHelper)(nil).CheckForOneTimePasswordToken), arg0, arg1)
}

// CheckForResetToken mocks base method
func (m *MockUserHelper) CheckForResetToken(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForResetToken", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForResetToken indicates an expected call of CheckForResetToken
func (mr *MockUserHelperMockRecorder) CheckForResetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForResetToken", reflect.TypeOf((*MockUserHelper)(nil).CheckForResetToken), arg0, arg1)
}

// CleanUp mocks base method
func (m *MockUserHelper) CleanUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp")
}

// CleanUp indicates an expected call of CleanUp
func (mr *MockUserHelperMockRecorder) CleanUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockUserHelper)(nil).CleanUp))
}

// ComparePasswords mocks base method
func (m *MockUserHelper) ComparePasswords(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords
func (mr *MockUserHelperMockRecorder) ComparePasswords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockUserHelper)(nil).ComparePasswords), arg0, arg1)
}

// CreateJWTToken mocks base method
func (m *MockUserHelper) CreateJWTToken(arg0, arg1 int, arg2 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWTToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateJWTToken indicates an expected call of CreateJWTToken
func (mr *MockUserHelperMockRecorder) CreateJWTToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTToken", reflect.TypeOf((*MockUserHelper)(nil).CreateJWTToken), arg0, arg1, arg2)
}

// CreateUser mocks base method
func (m *MockUserHelper) CreateUser(arg0 users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserHelperMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserHelper)(nil).CreateUser), arg0)
}

// GetUser mocks base method
func (m *MockUserHelper) GetUser(arg0 int) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserHelperMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserHelper)(nil).GetUser), arg0)
}

// GetUserByEmail mocks base method
func (m *MockUserHelper) GetUserByEmail(arg0 string) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserHelperMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserHelper)(nil).GetUserByEmail), arg0)
}

// HashPassword mocks base method
func (m *MockUserHelper) HashPassword(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword
func (mr *MockUserHelperMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockUserHelper)(nil).HashPassword), arg0)
}

// IssueActivationRequest mocks base method
func (m *MockUserHelper) IssueActivationRequest(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueActivationRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueActivationRequest indicates an expected call of IssueActivationRequest
func (mr *MockUserHelperMockRecorder) IssueActivationRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueActivationRequest", reflect.TypeOf((*MockUserHelper)(nil).IssueActivationRequest), arg0, arg1, arg2)
}

// IssueOneTimePasswordRequest mocks base method
func (m *MockUserHelper) IssueOneTimePasswordRequest(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueOneTimePasswordRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueOneTimePasswordRequest indicates an expected call of IssueOneTimePasswordRequest
func (mr *MockUserHelperMockRecorder) IssueOneTimePasswordRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOneTimePasswordRequest", reflect.TypeOf((*MockUserHelper)(nil).IssueOneTimePasswordRequest), arg0, arg1, arg2)
}

// IssueResetRequest mocks base method
func (m *MockUserHelper) IssueResetRequest(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueResetRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueResetRequest indicates an expected call of IssueResetRequest
func (mr *MockUserHelperMockRecorder) IssueResetRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueResetRequest", reflect.TypeOf((*MockUserHelper)(nil).IssueResetRequest), arg0, arg1, arg2)
}

// ListUsers mocks base method
func (m *MockUserHelper) ListUsers(arg0 bool, arg1 []int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockUserHelperMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserHelper)(nil).ListUsers), arg0, arg1)
}

// Login mocks base method
func (m *MockUserHelper) Login(arg0 string, arg1 int, arg2 users.User) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserHelperMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserHelper)(nil).Login), arg0, arg1, arg2)
}

// NewEmptyUser mocks base method
func (m *MockUserHelper) NewEmptyUser() users.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEmptyUser")
	ret0, _ := ret[0].(users.User)
	return ret0
}

// NewEmptyUser indicates an expected call of NewEmptyUser
func (mr *MockUserHelperMockRecorder) NewEmptyUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEmptyUser", reflect.TypeOf((*MockUserHelper)(nil).NewEmptyUser))
}

// PasswordChange mocks base method
func (m *MockUserHelper) PasswordChange(arg0 int, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordChange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PasswordChange indicates an expected call of PasswordChange
func (mr *MockUserHelperMockRecorder) PasswordChange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordChange", reflect.TypeOf((*MockUserHelper)(nil).PasswordChange), arg0, arg1, arg2, arg3)
}

// PasswordChangeForced mocks base method
func (m *MockUserHelper) PasswordChangeForced(arg0 int, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordChangeForced", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PasswordChangeForced indicates an expected call of PasswordChangeForced
func (mr *MockUserHelperMockRecorder) PasswordChangeForced(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordChangeForced", reflect.TypeOf((*MockUserHelper)(nil).PasswordChangeForced), arg0, arg1, arg2)
}

// RemoveUserFromOrganization mocks base method
func (m *MockUserHelper) RemoveUserFromOrganization(arg0 users.User, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromOrganization indicates an expected call of RemoveUserFromOrganization
func (mr *MockUserHelperMockRecorder) RemoveUserFromOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromOrganization", reflect.TypeOf((*MockUserHelper)(nil).RemoveUserFromOrganization), arg0, arg1)
}

// TokenGenerator mocks base method
func (m *MockUserHelper) TokenGenerator() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenGenerator")
	ret0, _ := ret[0].(string)
	return ret0
}

// TokenGenerator indicates an expected call of TokenGenerator
func (mr *MockUserHelperMockRecorder) TokenGenerator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenGenerator", reflect.TypeOf((*MockUserHelper)(nil).TokenGenerator))
}

// Update mocks base method
func (m *MockUserHelper) Update(arg0 int, arg1 users.User) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserHelperMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserHelper)(nil).Update), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockUserHelper) UpdateUser(arg0 users.User) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserHelperMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserHelper)(nil).UpdateUser), arg0)
}

// UseToken mocks base method
func (m *MockUserHelper) UseToken(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseToken indicates an expected call of UseToken
func (mr *MockUserHelperMockRecorder) UseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseToken", reflect.TypeOf((*MockUserHelper)(nil).UseToken), arg0)
}

// ValidatePassword mocks base method
func (m *MockUserHelper) ValidatePassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword
func (mr *MockUserHelperMockRecorder) ValidatePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockUserHelper)(nil).ValidatePassword), arg0)
}

// ValidateToken mocks base method
func (m *MockUserHelper) ValidateToken(arg0 string) (int, int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ValidateToken indicates an expected call of ValidateToken
func (mr *MockUserHelperMockRecorder) ValidateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockUserHelper)(nil).ValidateToken), arg0)
}
